// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example.proto

/*
	Package example is a generated protocol buffer package.

	GoGo gRPC Example

	This example is used to show how to use gRPC and
	gRPC-Gateway with GoGo Protobuf.

	It is generated from these files:
		example.proto

	It has these top-level messages:
		User
		UserRole
*/
package example

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mwitkow/go-proto-validators"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	Role_GUEST  Role = 0
	Role_MEMBER Role = 1
	Role_ADMIN  Role = 2
)

var Role_name = map[int32]string{
	0: "GUEST",
	1: "MEMBER",
	2: "ADMIN",
}
var Role_value = map[string]int32{
	"GUEST":  0,
	"MEMBER": 1,
	"ADMIN":  2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptorExample, []int{0} }

type User struct {
	ID         uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Role       Role       `protobuf:"varint,2,opt,name=role,proto3,enum=example.Role" json:"role,omitempty"`
	CreateDate *time.Time `protobuf:"bytes,3,opt,name=create_date,json=createDate,stdtime" json:"create_date,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{0} }

func (m *User) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_GUEST
}

func (m *User) GetCreateDate() *time.Time {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

type UserRole struct {
	Role Role `protobuf:"varint,1,opt,name=role,proto3,enum=example.Role" json:"role,omitempty"`
}

func (m *UserRole) Reset()                    { *m = UserRole{} }
func (m *UserRole) String() string            { return proto.CompactTextString(m) }
func (*UserRole) ProtoMessage()               {}
func (*UserRole) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{1} }

func (m *UserRole) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_GUEST
}

func init() {
	proto.RegisterType((*User)(nil), "example.User")
	golang_proto.RegisterType((*User)(nil), "example.User")
	proto.RegisterType((*UserRole)(nil), "example.UserRole")
	golang_proto.RegisterType((*UserRole)(nil), "example.UserRole")
	proto.RegisterEnum("example.Role", Role_name, Role_value)
	golang_proto.RegisterEnum("example.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ListUsers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (UserService_ListUsersClient, error)
	ListUsersByRole(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (UserService_ListUsersByRoleClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/example.UserService/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (UserService_ListUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[0], c.cc, "/example.UserService/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceListUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) ListUsersByRole(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (UserService_ListUsersByRoleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[1], c.cc, "/example.UserService/ListUsersByRole", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUsersByRoleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUsersByRoleClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceListUsersByRoleClient struct {
	grpc.ClientStream
}

func (x *userServiceListUsersByRoleClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceServer interface {
	AddUser(context.Context, *User) (*google_protobuf.Empty, error)
	ListUsers(*google_protobuf.Empty, UserService_ListUsersServer) error
	ListUsersByRole(*UserRole, UserService_ListUsersByRoleServer) error
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUsers(m, &userServiceListUsersServer{stream})
}

type UserService_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceListUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_ListUsersByRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRole)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUsersByRole(m, &userServiceListUsersByRoleServer{stream})
}

type UserService_ListUsersByRoleServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceListUsersByRoleServer struct {
	grpc.ServerStream
}

func (x *userServiceListUsersByRoleServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _UserService_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersByRole",
			Handler:       _UserService_ListUsersByRole_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.ID))
	}
	if m.Role != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Role))
	}
	if m.CreateDate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(types.SizeOfStdTime(*m.CreateDate)))
		n1, err := types.StdTimeMarshalTo(*m.CreateDate, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UserRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Role))
	}
	return i, nil
}

func encodeVarintExample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovExample(uint64(m.ID))
	}
	if m.Role != 0 {
		n += 1 + sovExample(uint64(m.Role))
	}
	if m.CreateDate != nil {
		l = types.SizeOfStdTime(*m.CreateDate)
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *UserRole) Size() (n int) {
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovExample(uint64(m.Role))
	}
	return n
}

func sovExample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateDate == nil {
				m.CreateDate = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CreateDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("example.proto", fileDescriptorExample) }
func init() { golang_proto.RegisterFile("example.proto", fileDescriptorExample) }

var fileDescriptorExample = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x41, 0x6f, 0x12, 0x41,
	0x18, 0xed, 0x6c, 0x69, 0x6b, 0xa7, 0x62, 0xe9, 0x44, 0x2d, 0x59, 0x0d, 0xac, 0xc4, 0x03, 0x21,
	0xee, 0x0e, 0xc5, 0xc4, 0x98, 0x7a, 0x30, 0x20, 0xc4, 0x90, 0x8a, 0xd1, 0x6d, 0x7b, 0xf1, 0x62,
	0x06, 0x76, 0x9c, 0x4e, 0x64, 0x99, 0xcd, 0xcc, 0x00, 0x72, 0xf5, 0xe8, 0xc9, 0xe8, 0x7f, 0xf0,
	0x77, 0x78, 0xf4, 0x68, 0xe2, 0xdd, 0x1a, 0xf4, 0x47, 0x78, 0x34, 0x3b, 0xbb, 0xd0, 0x82, 0xd6,
	0xd3, 0xee, 0xfb, 0xbe, 0xf7, 0xde, 0x37, 0xf3, 0xe6, 0x83, 0x59, 0xfa, 0x86, 0x84, 0x51, 0x9f,
	0x7a, 0x91, 0x14, 0x5a, 0xa0, 0x8d, 0x14, 0xda, 0x37, 0x98, 0x10, 0xac, 0x4f, 0xb1, 0x29, 0x77,
	0x87, 0xaf, 0x30, 0x0d, 0x23, 0x3d, 0x49, 0x58, 0x76, 0x71, 0xb9, 0xa9, 0x79, 0x48, 0x95, 0x26,
	0x61, 0x94, 0x12, 0x6e, 0xa6, 0x04, 0x12, 0x71, 0x4c, 0x06, 0x03, 0xa1, 0x89, 0xe6, 0x62, 0xa0,
	0xd2, 0xee, 0x1d, 0xf3, 0xe9, 0xb9, 0x8c, 0x0e, 0x5c, 0x35, 0x26, 0x8c, 0x51, 0x89, 0x45, 0x64,
	0x18, 0xff, 0x60, 0xbb, 0x8c, 0xeb, 0x93, 0x61, 0xd7, 0xeb, 0x89, 0x10, 0x33, 0xc1, 0xc4, 0xd9,
	0xd4, 0x18, 0x19, 0x60, 0xfe, 0x52, 0xfa, 0xbd, 0x73, 0xf4, 0x70, 0xcc, 0xf5, 0x6b, 0x31, 0xc6,
	0x4c, 0xb8, 0xa6, 0xe9, 0x8e, 0x48, 0x9f, 0x07, 0x44, 0x0b, 0xa9, 0xf0, 0xfc, 0x37, 0xd1, 0x95,
	0x3e, 0x01, 0x98, 0x39, 0x56, 0x54, 0xa2, 0xfb, 0xd0, 0xe2, 0x41, 0x1e, 0x38, 0xa0, 0x9c, 0x6d,
	0x94, 0xa7, 0xdf, 0x8b, 0x56, 0xbb, 0x39, 0x3d, 0x2d, 0x16, 0x72, 0x2b, 0x15, 0xbb, 0xdd, 0x74,
	0xc2, 0xa1, 0xd2, 0x0e, 0x71, 0x22, 0xa1, 0xb8, 0xe6, 0x23, 0xea, 0xf0, 0x81, 0xa6, 0x8c, 0x4a,
	0xdf, 0xe2, 0x01, 0xba, 0x05, 0x33, 0x52, 0xf4, 0x69, 0xde, 0x72, 0x40, 0xf9, 0x4a, 0x2d, 0xeb,
	0xcd, 0xa2, 0xf5, 0x45, 0x9f, 0xfa, 0xa6, 0x85, 0xea, 0x70, 0xab, 0x27, 0x29, 0xd1, 0xf4, 0x65,
	0x40, 0x34, 0xcd, 0xaf, 0x3a, 0xa0, 0xbc, 0x55, 0xb3, 0xbd, 0x24, 0x2e, 0x6f, 0x76, 0x33, 0xef,
	0x68, 0x96, 0x67, 0x23, 0xf3, 0xfe, 0xb4, 0x08, 0x7c, 0x98, 0x88, 0x9a, 0x44, 0xd3, 0x92, 0x0b,
	0x2f, 0xc5, 0xe7, 0x8c, 0x4d, 0xe7, 0x13, 0xc1, 0x85, 0x13, 0x2b, 0x65, 0x98, 0x31, 0xd4, 0x4d,
	0xb8, 0xf6, 0xf8, 0xb8, 0x75, 0x78, 0x94, 0x5b, 0x41, 0x10, 0xae, 0x77, 0x5a, 0x9d, 0x46, 0xcb,
	0xcf, 0x81, 0xb8, 0x5c, 0x6f, 0x76, 0xda, 0x4f, 0x73, 0x56, 0xed, 0x37, 0x80, 0x5b, 0xb1, 0xf3,
	0x21, 0x95, 0x23, 0xde, 0xa3, 0xa8, 0x0d, 0x37, 0xea, 0x41, 0x60, 0x32, 0x39, 0x73, 0x8e, 0xa1,
	0x7d, 0xfd, 0xaf, 0x03, 0xb7, 0xe2, 0xed, 0x28, 0xed, 0xbe, 0xfd, 0xf6, 0xeb, 0xa3, 0xb5, 0x53,
	0xba, 0x6c, 0x1e, 0x7e, 0xb4, 0x87, 0x87, 0x8a, 0xca, 0x7d, 0x50, 0x41, 0x07, 0x70, 0xf3, 0x09,
	0x57, 0x3a, 0x16, 0x2b, 0x74, 0x81, 0xda, 0x5e, 0x1c, 0x52, 0xba, 0x66, 0xcc, 0xb6, 0x51, 0xf6,
	0xbc, 0x99, 0xaa, 0x02, 0xf4, 0x1c, 0x6e, 0xcf, 0xcd, 0x1a, 0x13, 0x73, 0xb9, 0x9d, 0x05, 0x69,
	0x5c, 0x5a, 0x76, 0xb3, 0x8d, 0xdb, 0x55, 0x84, 0x16, 0xdc, 0x70, 0x1c, 0x51, 0x15, 0x34, 0xde,
	0x81, 0x0f, 0xf5, 0x03, 0xb4, 0x56, 0x5b, 0xdd, 0xf3, 0xaa, 0x15, 0x60, 0xc9, 0x87, 0x70, 0x97,
	0xf9, 0xcf, 0x1e, 0x39, 0xa9, 0x85, 0x23, 0xa9, 0x79, 0x70, 0x21, 0x27, 0xe8, 0xf6, 0x89, 0xd6,
	0x91, 0xda, 0xc7, 0x78, 0x79, 0x2d, 0x99, 0x8c, 0x7a, 0x6e, 0x2a, 0xf8, 0x32, 0x2d, 0x80, 0xaf,
	0xd3, 0x02, 0xf8, 0x31, 0x2d, 0x80, 0xcf, 0x3f, 0x0b, 0xe0, 0x45, 0xe5, 0x7f, 0xec, 0x64, 0xa3,
	0x1f, 0xa4, 0xa8, 0xbb, 0x6e, 0xe0, 0xdd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x31, 0xc8,
	0xee, 0x9b, 0x03, 0x00, 0x00,
}
